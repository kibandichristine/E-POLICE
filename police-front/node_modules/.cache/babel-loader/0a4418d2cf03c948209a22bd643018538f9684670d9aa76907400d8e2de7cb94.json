{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/edwin/Desktop/police-front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport default function variance(values, valueof) {\n  var count = 0;\n  var delta;\n  var mean = 0;\n  var sum = 0;\n  if (valueof === undefined) {\n    var _iterator = _createForOfIteratorHelper(values),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        if (value != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    var index = -1;\n    var _iterator2 = _createForOfIteratorHelper(values),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _value = _step2.value;\n        if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {\n          delta = _value - mean;\n          mean += delta / ++count;\n          sum += delta * (_value - mean);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}","map":{"version":3,"names":["variance","values","valueof","count","delta","mean","sum","undefined","value","index"],"sources":["/home/edwin/Desktop/police-front/node_modules/d3-array/src/variance.js"],"sourcesContent":["export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n"],"mappings":";AAAA,eAAe,SAASA,QAAQ,CAACC,MAAM,EAAEC,OAAO,EAAE;EAChD,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK;EACT,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIJ,OAAO,KAAKK,SAAS,EAAE;IAAA,2CACPN,MAAM;MAAA;IAAA;MAAxB,oDAA0B;QAAA,IAAjBO,KAAK;QACZ,IAAIA,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,GAAG,CAACA,KAAK,KAAKA,KAAK,EAAE;UAC9CJ,KAAK,GAAGI,KAAK,GAAGH,IAAI;UACpBA,IAAI,IAAID,KAAK,GAAG,EAAED,KAAK;UACvBG,GAAG,IAAIF,KAAK,IAAII,KAAK,GAAGH,IAAI,CAAC;QAC/B;MACF;IAAC;MAAA;IAAA;MAAA;IAAA;EACH,CAAC,MAAM;IACL,IAAII,KAAK,GAAG,CAAC,CAAC;IAAC,4CACGR,MAAM;MAAA;IAAA;MAAxB,uDAA0B;QAAA,IAAjBO,MAAK;QACZ,IAAI,CAACA,MAAK,GAAGN,OAAO,CAACM,MAAK,EAAE,EAAEC,KAAK,EAAER,MAAM,CAAC,KAAK,IAAI,IAAI,CAACO,MAAK,GAAG,CAACA,MAAK,KAAKA,MAAK,EAAE;UAClFJ,KAAK,GAAGI,MAAK,GAAGH,IAAI;UACpBA,IAAI,IAAID,KAAK,GAAG,EAAED,KAAK;UACvBG,GAAG,IAAIF,KAAK,IAAII,MAAK,GAAGH,IAAI,CAAC;QAC/B;MACF;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;EACA,IAAIF,KAAK,GAAG,CAAC,EAAE,OAAOG,GAAG,IAAIH,KAAK,GAAG,CAAC,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}